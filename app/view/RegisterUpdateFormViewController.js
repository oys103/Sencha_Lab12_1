/*
 * File: app/view/RegisterUpdateFormViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.5.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.7.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.7.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HoursLogger.view.RegisterUpdateFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.registerupdateform',

    requires: [
        'HoursLogger.store.Hours'
    ],

    onRegUpdStartFieldFocusleave: function(component, event, eOpts) {
        //12.12.2012 12:12
        var start = Ext.getCmp("regUpdStartField").getValue();
        var stop = Ext.getCmp("regUpdStopField").getValue();
        var time = Ext.getCmp("regUpdDurationField").getValue();
        if(
        ((stop === null || stop === "") && (time !== null && time !== "") ||
        (time === null || time === "") && (stop !== null && stop !== "")) &&
        start !== null && start !== ""){
            debugger;
            var dStart = new Date(start);
            Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(dStart, 'C'));
            var dStop = new Date(stop);
            if (stop === null || stop === ""){
                Ext.getCmp("regUpdStopField").setValue(Ext.Date.format(Ext.Date.add(dStart, Ext.Date.HOUR, time), 'C'));
            } else if (time === null || time === ""){
                Ext.getCmp("regUpdStopField").setValue(Ext.Date.format(dStop, 'C'));
                Ext.getCmp("regUpdDurationField").setValue(Ext.Date.diff(dStart, dStop, Ext.Date.HOUR));
            }
        }
    },

    onRegUpdStopFieldFocusleave: function(component, event, eOpts) {
        var start = Ext.getCmp("regUpdStartField").getValue();
        var stop = Ext.getCmp("regUpdStopField").getValue();
        var time = Ext.getCmp("regUpdDurationField").getValue();
        if(
        ((start === null || start === "") && (time !== null && time !== "") ||
        (time === null || time === "") && (start !== null && start !== "")) &&
        stop !== null && stop !== ""){
            var dStart = new Date(start);
            Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(dStart, 'C'));
            var dStop = new Date(stop);
            Ext.getCmp("regUpdStopField").setValue(Ext.Date.format(dStop, 'C'));
            if (start === null || start === ""){
                Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(Ext.Date.subtract(dStart, Ext.Date.HOUR, time), 'C'));
            } else if (time === null || time === ""){
                Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(dStart, 'C'));
                Ext.getCmp("regUpdDurationField").setValue(Ext.Date.diff(dStart, dStop, Ext.Date.HOUR));
            }
        }
    },

    /* Broken? Good luck! */
    onRegUpdDurationFieldFocusleave: function(component, event, eOpts) {
        var start = Ext.getCmp("regUpdStartField").getValue();
        var stop = Ext.getCmp("regUpdStopField").getValue();
        var time = Ext.getCmp("regUpdDurationField").getValue();
        if(
        ((start === null || start === "") && (stop !== null && stop !== "") ||
        (stop === null || stop === "") && (start !== null && start !== "")) &&
        time !== null && time !== ""){
            var dStart = new Date(start);
            var dStop = new Date(stop);
            if (start === null || start === ""){
                Ext.getCmp("regUpdStopField").setValue(Ext.Date.format(dStop, 'C'));
                Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(Ext.Date.subtract(dStart, Ext.Date.HOUR, time), 'C'));
            } else if (stop === null || stop === ""){
                Ext.getCmp("regUpdStartField").setValue(Ext.Date.format(dStart, 'C'));
                Ext.getCmp("regUpdStopField").setValue(Ext.Date.format(Ext.Date.add(dStart, Ext.Date.HOUR, time), 'C'));
            }
        }
    },

    submitUpdate: function(button, e, eOpts) {
        var view = this.getView();
        record = view.getRecord();
        console.log(view);
        view.destroy();
        console.log(record);
        record.commit();
    },

    cancelUpdate: function(button, e, eOpts) {
        var view = this.getView(),
            record = view.getRecord();
        view.destroy();
        record.reject();
    },

    onFormpanelInitialize: function(component, eOpts) {
        var record = component.getRecord();
        if (record !== null) {
            Ext.getCmp("regUpdStartField").setValue(record.data.start);
            Ext.getCmp("regUpdStopField").setValue(record.data.stop);
            Ext.getCmp("regUpdDurationField").setValue(record.data.duration);
            Ext.getCmp("regUpdCommentField").setValue(record.data.comment);

        }
    }

});